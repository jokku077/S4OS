#include <stdio.h>

#define MAX_PAGES 10

// Function to check if a page exists in the frame
int isPageExists(int page, int frames[], int num_frames) {
    int i;
    for (i = 0; i < num_frames; i++) {
        if (frames[i] == page) {
            return 1;
        }
    }
    return 0;
}

// Function to display the contents of the frame
void displayFrame(int frames[], int num_frames) {
    int i;
    for (i = 0; i < num_frames; i++) {
        if (frames[i] != -1) {
            printf("%d ", frames[i]);
        }
    }
    printf("\n");
}

// Function to implement the FIFO (First-In-First-Out) page replacement algorithm
void fifo(int pages[], int num_pages, int num_frames) {
    int frames[num_frames];
    int frame_index = 0;
    int page_faults = 0;
    int i;

    for (i = 0; i < num_frames; i++) {
        frames[i] = -1;
    }

    printf("FIFO Page Replacement Algorithm\n");

    for (i = 0; i < num_pages; i++) {
        int page = pages[i];

        if (!isPageExists(page, frames, num_frames)) {
            frames[frame_index] = page;
            frame_index = (frame_index + 1) % num_frames;
            page_faults++;
        }

        printf("Page: %d\n", page);
        displayFrame(frames, num_frames);
    }

    printf("Total Page Faults: %d\n\n", page_faults);
}

// Function to implement the LRU (Least Recently Used) page replacement algorithm
void lru(int pages[], int num_pages, int num_frames) {
    int frames[num_frames];
    int page_faults = 0;
    int counter[MAX_PAGES] = {0};
    int i, j;

    for (i = 0; i < num_frames; i++) {
        frames[i] = -1;
    }

    printf("LRU Page Replacement Algorithm\n");

    for (i = 0; i < num_pages; i++) {
        int page = pages[i];

        if (!isPageExists(page, frames, num_frames)) {
            int replace_index = 0;
            int min_counter = counter[frames[0]];

            for (j = 1; j < num_frames; j++) {
                if (counter[frames[j]] < min_counter) {
                    min_counter = counter[frames[j]];
                    replace_index = j;
                }
            }

            frames[replace_index] = page;
            page_faults++;
        }

        counter[page]++;
        printf("Page: %d\n", page);
        displayFrame(frames, num_frames);
    }

    printf("Total Page Faults: %d\n\n", page_faults);
}

// Function to implement the OPT (Optimal) page replacement algorithm
void opt(int pages[], int num_pages, int num_frames) {
    int frames[num_frames];
    int page_faults = 0;
    int i, j;

    for (i = 0; i < num_frames; i++) {
        frames[i] = -1;
    }

    printf("OPT Page Replacement Algorithm\n");

    for (i = 0; i < num_pages; i++) {
        int page = pages[i];

        if (!isPageExists(page, frames, num_frames)) {
            int replace_index = 0;
            int max_future_index = -1;

            for (j = 0; j < num_frames; j++) {
                int future_index = -1;
                int k;

                for (k = i + 1; k < num_pages; k++) {
                    if (pages[k] == frames[j]) {
                        future_index = k;
                        break;
                    }
                }

                if (future_index == -1) {
                    replace_index = j;
                    break;
                }

                if (future_index > max_future_index) {
                    max_future_index = future_index;
                    replace_index = j;
                }
            }

            frames[replace_index] = page;
            page_faults++;
        }

        printf("Page: %d\n", page);
        displayFrame(frames, num_frames);
    }

    printf("Total Page Faults: %d\n\n", page_faults);
}

int main() {
    int pages[MAX_PAGES];
    int num_pages, num_frames, i;

    printf("Enter the number of pages: ");
    scanf("%d", &num_pages);

    printf("Enter the page sequence: ");
    for (i = 0; i < num_pages; i++) {
        scanf("%d", &pages[i]);
    }

    printf("Enter the number of frames: ");
    scanf("%d", &num_frames);

    while (1) {
        int choice;

        printf("\nPage Replacement Algorithms:\n");
        printf("1. FIFO (First-In-First-Out)\n");
        printf("2. LRU (Least Recently Used)\n");
        printf("3. OPT (Optimal)\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                fifo(pages, num_pages, num_frames);
                break;
            case 2:
                lru(pages, num_pages, num_frames);
                break;
            case 3:
                opt(pages, num_pages, num_frames);
                break;
            case 4:
                return 0;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}
